import React, { useState, useEffect, useRef } from "react";
import { useSearchParams } from "react-router-dom";
import Navbar from "../Components/Navbar";
import ProductBanner from "../Components/ProductBanner";
import CategorySlider from "../Components/CategorySlider";
import Footer from "../Components/Footer";
import { useQuery } from "@tanstack/react-query";
import { fetchReviewOf } from "../api/products";
import phone from "../assets/phone.png";
import "../Styles/Shop.css";
import CategoryService from "../services/categoryService";
import { useAuth } from "../context/AuthContext";
import type { Product } from "../Components/Types/Product";
import ProductCard1 from "../ALT/ProductCard1";
import ProductCardSkeleton from "../skeleton/ProductCardSkeleton";
import { API_BASE_URL } from "../config";
import { Search } from "lucide-react";

// ... (keep all your existing interfaces and types)

const Shop: React.FC = () => {
  const { token } = useAuth();
  const [searchParams, setSearchParams] = useSearchParams();
  const [isSidebarOpen, setIsSidebarOpen] = useState(false);
  const [categorySearch, setCategorySearch] = useState("");
  const sidebarRef = useRef<HTMLDivElement>(null);

  // ... (keep all your existing state and effect hooks)

  // Toggle sidebar for mobile
  const toggleSidebar = () => {
    setIsSidebarOpen(!isSidebarOpen);
  };

  // Close sidebar when clicking outside
  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (sidebarRef.current && !sidebarRef.current.contains(event.target as Node)) {
        setIsSidebarOpen(false);
      }
    };

    document.addEventListener('mousedown', handleClickOutside);
    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, []);

  // ... (keep all your existing data fetching and processing logic)

  return (
    <div className="shop-page">
      <Navbar />
      <ProductBanner />
      <CategorySlider />
      
      <div className="shop-container">
        {/* Mobile Filter Button */}
        <button 
          className="mobile-filter-button" 
          onClick={toggleSidebar}
          aria-label="Toggle filters"
        >
          <span className="filter-icon">⚙</span> Filters
        </button>

        {/* Sidebar Overlay */}
        {isSidebarOpen && (
          <div 
            className="sidebar-overlay" 
            onClick={toggleSidebar}
            role="button"
            aria-label="Close sidebar"
            tabIndex={0}
          />
        )}

        <div className="shop-content">
          {/* Sidebar */}
          <aside 
            ref={sidebarRef}
            className={`filter-sidebar ${isSidebarOpen ? 'open' : ''}`}
          >
            <div className="filter-sidebar__header">
              <h3>Filters</h3>
              <button 
                className="filter-sidebar__close" 
                onClick={toggleSidebar}
                aria-label="Close filters"
              >
                ×
              </button>
            </div>

            {/* Your existing filter sections */}
            <div className="filter-sidebar__section">
              <h4 className="filter-sidebar__section-title">Categories</h4>
              {/* Your category filter content */}
            </div>

            {selectedCategory !== undefined && (
              <div className="filter-sidebar__section">
                <h4 className="filter-sidebar__section-title">Subcategories</h4>
                {/* Your subcategory filter content */}
              </div>
            )}
            
            {/* Add more filter sections as needed */}
          </aside>

          {/* Main Content */}
          <main className="products-container">
            <div className="products-header">
              <h1>{getDisplayTitle()}</h1>
              {getCurrentSubcategoryName() && (
                <h2>{getCurrentSubcategoryName()}</h2>
              )}
            </div>

            {/* Your products grid */}
            <div className="products-grid">
              {isLoadingProducts ? (
                Array(8).fill(null).map((_, index) => (
                  <ProductCardSkeleton key={index} count={1} />
                ))
              ) : filteredProducts.length > 0 ? (
                filteredProducts.map((product) => (
                  <ProductCard1 key={product.id} product={product} />
                ))
              ) : (
                <div className="no-products">
                  <p>No products found matching your criteria.</p>
                  {hasActiveFilters && (
                    <button 
                      onClick={clearAllFilters}
                      className="clear-filters-button"
                    >
                      Clear All Filters
                    </button>
                  )}
                </div>
              )}
            </div>
          </main>
        </div>
      </div>
      
      <Footer />
    </div>
  );
};

export default Shop;
